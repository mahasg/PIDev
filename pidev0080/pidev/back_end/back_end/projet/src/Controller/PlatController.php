<?php

namespace App\Controller;

use App\Entity\Categorie;
use App\Entity\Plat;
use App\Form\CategorieType;
use App\Form\PlatType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Form\Extension\Core\Type\FileType;

class PlatController extends AbstractController
{
    /**
     * @Route("/plat", name="plat")
     */
    public function index(): Response
    {
        return $this->render('plat/index.html.twig', [
            'controller_name' => 'PlatController',
        ]);
    }
    /**
     * @Route("/afficherPlat", name="afficherPlat")
     */
    public function afficherp()
    {
        $plat = $this->getDoctrine()->getRepository(Plat::class)->findAll();
        return $this->render('plat/afficherPlat.html.twig',array('listplat'=>$plat));

    }
    /**
     * @Route("/addPlat", name="addCPlat")
     */
    public function addPlat(Request $request){
        $plat= new Plat();
        $form = $this->createForm(PlatType::class,$plat);
        $form->handleRequest($request);
        if ($form->isSubmitted() ){
            $em = $this->getDoctrine()->getManager();



            $uploadedFile = $form['imagep']->getData(); // retourne l'image saisie par l'utilisateur
            if ($uploadedFile) { // si il ya une image qui a ete saisie donc uploadfile not null on commence le traitement
                // destination = contient le chemin du dossier dans leue on va mettre une copie de l'image
                // kernel.project_dir = racine de notre projet
                $destination = $this->getParameter('kernel.project_dir').'/public/images/productImageUploads/';
                // retourner le nom de l'image a l'origine
                $originalFilename = pathinfo($uploadedFile->getClientOriginalName(), PATHINFO_FILENAME);
                // concatenation entre le nom originale de notre image et  un code unique pour eviter les erreur
                // $uploadedFile->guessExtension() == retourne l'extension de notre fichier
                $newFilename = $originalFilename.'-'.$this->generateUniqueFileId().'.'.$uploadedFile->guessExtension();
                // copier l'image selectioner dans le nouveu chemin saisie ($destination) avec un nouveau nom unique
                // newFile
                $uploadedFile->move(
                    $destination,
                    $newFilename
                );
                // le champ de la base de doner resoit le nouveu nom de l'image
                $plat->setImagep($newFilename);
            }

            $em->persist($plat);
            $em->flush();
            return $this->redirectToRoute('afficherPlat');
        }
        return $this->render("plat/addPlat.html.twig",array("formPlat"=>$form->createView()));
    }

    /**
     * @return string
     */
    private function generateUniqueFileId()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/updatePlat/{idp}", name="updatePlat")
     */
    public function updatePlat(Request $request,$idp){
        $plat=  $this->getDoctrine()->getManager()->getRepository(Plat::class)->find($idp);

        $form = $this->createForm(PlatType::class,$plat);
        $form->handleRequest($request);
        if ($form->isSubmitted() ){
            $em = $this->getDoctrine()->getManager();
            //$em->persist($student);
            $em->flush();//mise a jour
            return $this->redirectToRoute('afficherPlat');
        }
        return $this->render("plat/addPlat.html.twig",array("formPlat"=>$form->createView()));
    }

    /**
     * @Route("/deletePlat/{idp}", name="deletePlat")
     */
    public function delete($idp)
    {
        $Classroom = $this->getDoctrine()->getRepository(Plat::class)->find($idp);
        $em=$this->getDoctrine()->getManager();
        $em->remove($Classroom);
        $em->flush();
        return $this->redirectToRoute("afficherPlat");
    }

    /**
     * @Route("/afficherPlatFront", name="afficherPlatFront")
     */
    public function afficherPlatFront()
    {
        $categorie = $this->getDoctrine()->getRepository(Categorie::class)->findAll() ;
        $plat = $this->getDoctrine()->getRepository(Plat::class)->findAll();
        $coutPlatc=   $this->getDoctrine()->getManager()->getRepository(Plat::class) ->coutPlatParCategorie();
        return $this->render('plat/afficherPlatFront.html.twig',array('listplat'=>$plat,
                'listcategorie' => $categorie,  'coutPlatc' =>  $coutPlatc));

    }

    /**
     * @Route("/TriParategorie/{idc}", name="TriParategorie")
     */
    public function TriParategorie(Request $request,$idc){

        $st =  $this->getDoctrine()->getManager()->getRepository(Plat::class) ;

        $filtre= $st->findBy(array("categorie" => $idc ));
        $categorie = $this->getDoctrine()->getRepository(Categorie::class)->findAll() ;

        $coutPlatc=  $st->coutPlatParCategorie();

        return $this->render('plat/afficherPlatFront.html.twig',array('listplat'=>$filtre,
            'listcategorie' => $categorie , 'coutPlatc' =>  $coutPlatc));

    }

    /**
     * @Route("/CalculPlatParCategorie/{idc}", name="CalculPlatParCategorie")
     */
    public function CalculPlatParCategorie(Request $request,$idc){



        return $filtre;

    }


}

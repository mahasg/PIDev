<?php

namespace App\Controller;

use App\Entity\TypeAbonnement;
use App\Form\TypeAbonnementType;
use Doctrine\ORM\EntityRepository;
use App\Repository\TypeAbonnementRepository;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\UploadedFile;

class TypeAbonnementController extends AbstractController
{
    /**
     * @Route("/type/abonnement", name="type_abonnement")
     */
    public function index(): Response
    {
        return $this->render('type_abonnement/index.html.twig', [
            'controller_name' => 'TypeAbonnementController',
        ]);
    }

    /**
     * @param Request $request
     * @return Response
     * @Route("/AddTypeAbonnement",name="AddTypeAbonnement")
     */
    function AddTypeAbonnement(Request $request){
        $TypeAbonnement=new TypeAbonnement();
        $form=$this->createForm(TypeAbonnementType::class,$TypeAbonnement);

        $form->handleRequest($request);
        if($form->isSubmitted()&&$form->isValid()){
            $em=$this->getDoctrine()->getManager();
            $file = $form->get('image')->getData();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move('public/images/', $fileName);
            $TypeAbonnement->setImage($fileName);
            $em->persist($TypeAbonnement);
            $em->flush();
            return $this->redirectToRoute('AddTypeAbonnement');

        }
        return $this->render('type_abonnement/AddTypeAbonnement.html.twig',[
            'form'=>$form->createView()
        ]) ; }



    /**
     * @param TypeAbonnementRepository $repository
     * @return Response
     * @Route("/ListTypeAbonnement",name="ListTypeAbonnement")
     */
    public function ListTypeAbo(TypeAbonnementRepository $repository): Response
    {
        $ta=$repository->find_places();
        return $this->render('type_abonnement/ListTypeAbonnement.html.twig',['tab'=>$ta]);

    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }



    /**
     * @param TypeAbonnementRepository $repository
     * @return Response
     * @Route("/AfficheTypeAbonnement",name="AfficheTypeAbonnement")
     */
    public function Afficheabo(TypeAbonnementRepository $repository): Response
    {
        $TypeAbonnement=$repository->findAll();
        return $this->render('type_abonnement/AfficheTypeAbonnement.html.twig',['TypeAbonnement'=>$TypeAbonnement]);

    }

    /**
     * @param TypeAbonnementRepository $repository
     * @return Response
     * @Route("/updateTypeAbo/{id}", name="updateTypeAbo")
     */
    public function updateTypeAbonnement(Request $request,TypeAbonnementRepository $repository,$id){
        $TypeAbonnement=  $repository->find($id);

        $form = $this->createForm(TypeAbonnementType::class,$TypeAbonnement);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid() ){
            $em=$this->getDoctrine()->getManager();
            $file = $form->get('image')->getData();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move('public/images/', $fileName);
            $TypeAbonnement->setImage($fileName);            $em->flush();//mise a jour
            return $this->redirectToRoute('AfficheTypeAbonnement');
        }
        return $this->render("type_abonnement/updatetypeabonnement.html.twig",array("form"=>$form->createView()));
    }

    /**
     * @Route("/Supp/{id}",name="d")
     */

    function Delete($id,TypeAbonnementRepository $repository) {
        $TypeAbonnement =$repository->find($id);
        $em=$this->getDoctrine()->getManager();
        $em->remove($TypeAbonnement);
        $em->flush();
        return $this->redirectToRoute('AfficheTypeAbonnement');
    }







    }
